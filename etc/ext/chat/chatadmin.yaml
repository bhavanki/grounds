- name: scriptContent
  type: STRING
  value: |
    hasChannel = { n ->
      if (!n.startsWith('#')) {
        throw failure("That is not a valid channel name")
      }
      return hasAttr(extensionId, n)
    }
    getChannel = { n ->
      if (!n.startsWith('#')) {
        throw failure("That is not a valid channel name")
      }
      return getAttr(extensionId, n, "Channel $n not found")
    }
    getMembers = {c ->
      return c.getAttrInAttrListValue('members').get().getValue().split(',') as List
    }
    setMembers = {c, members ->
      setAttrInAttrListValue(extensionId, c.name, 'members', members.join(','))
    }
    subcommand = arg0
    switch (subcommand.toUpperCase()) {
      case "CREATE":
        if (hasChannel(arg1)) {
          throw failure("Channel ${arg1} already exists");
        }
        membersAttr = newAttr('members', '')
        channelAttrList = [ membersAttr ]
        setAttr(extensionId, arg1, channelAttrList)
        sendMessageToCaller("Created channel ${arg1}")
        break;
      case "DELETE":
        if (!hasChannel(arg1)) {
          throw failure("Channel ${arg1} does not exist");
        }
        removeAttr(extensionId, arg1);
        sendMessageToCaller("Deleted channel ${arg1}")
        break;
      case "SET_VISIBILITY":
        if (!hasChannel(arg1)) {
          throw failure("Channel ${arg1} does not exist");
        }
        if (binding.hasVariable('arg2')) {
          setAttrInAttrListValue(extensionId, arg1, 'visibleIf', arg2)
        } else {
          setAttrInAttrListValue(extensionId, arg1, 'visibleIf', null)
        }
        break;
      case "SET_JOINABILITY":
        if (!hasChannel(arg1)) {
          throw failure("Channel ${arg1} does not exist");
        }
        if (binding.hasVariable('arg2')) {
          setAttrInAttrListValue(extensionId, arg1, 'joinableIf', arg2)
        } else {
          setAttrInAttrListValue(extensionId, arg1, 'joinableIf', null)
        }
        break;
      case "ADD_MEMBER":
        channel = getChannel(arg2)
        members = getMembers(channel)
        if (members.contains(arg1)) {
          sendMessageToCaller("${arg1} is already a member of ${arg2}")
        } else {
          members.add(arg1)
          setMembers(channel, members)
        }
        break;
      case "REMOVE_MEMBER":
        channel = getChannel(arg2)
        members = getMembers(channel)
        if (!members.contains(arg1)) {
          sendMessageToCaller("${arg1} is not a member of ${arg2}")
        } else {
          members.remove(arg1)
          setMembers(channel, members)
        }
        break;
      default:
        throw failure("Unsupported command $subcommand")
    }
    return null
- name: scriptHelp
  type: ATTRLIST
  value: |
    - name: $CHATADMIN
      type: ATTRLIST
      value: |
        - name: syntax
          value: $CHATADMIN <subcommand> [<arguments>]
        - name: summary
          value: Administers the chat system
        - name: description
          value: |
            Available subcommands:
            - create
            - delete
            - set_visibility
            - set_joinability
            - add_member
            - remove_member
    - name: $CHATADMIN_CREATE
      type: ATTRLIST
      value: |
        - name: syntax
          value: $CHATADMIN CREATE <channel>
        - name: summary
          value: Creates a new chat channel
        - name: description
          value: The new channel starts out with no members.
    - name: $CHATADMIN_DELETE
      type: ATTRLIST
      value: |
        - name: syntax
          value: $CHATADMIN DELETE <channel>
        - name: summary
          value: Deletes a new chat channel
        - name: description
          value: The membership of the channel is lost on deletion.
    - name: $CHATADMIN_SET_VISIBILITY
      type: ATTRLIST
      value: |
        - name: syntax
          value: $CHATADMIN SET_VISIBILITY <channel> [<expression>]
        - name: summary
          value: Sets a visibility expression on a chat channel
        - name: description
          value: >
            When this expression is set, it must evaluate to true in order
            for a player to see the channel. The variables x and y in the
            expression stand for the channel attribute and the caller name,
            respectively. Omit the expression to clear it from the channel.
    - name: $CHATADMIN_SET_JOINABILITY
      type: ATTRLIST
      value: |
        - name: syntax
          value: $CHATADMIN SET_JOINABILITY <channel> [<expression>]
        - name: summary
          value: Sets a joinability expression on a chat channel
        - name: description
          value: >
            When this expression is set, it must evaluate to true in order
            for a player to join the channel. The variables x and y in the
            expression stand for the channel attribute and the caller name,
            respectively. Omit the expression to clear it from the channel.
    - name: $CHATADMIN_ADD_MEMBER
      type: ATTRLIST
      value: |
        - name: syntax
          value: $CHATADMIN ADD_MEMBER <player> <channel>
        - name: summary
          value: Adds a player to a chat channel
        - name: description
          value: This has the same effect as the player themself joining.
    - name: $CHATADMIN_REMOVE_MEMBER
      type: ATTRLIST
      value: |
        - name: syntax
          value: $CHATADMIN REMOVE_MEMBER <player> <channel>
        - name: summary
          value: Removes a player from a chat channel
        - name: description
          value: This has the same effect as the player themself leaving.
