- name: scriptContent
  type: STRING
  value: |
    getChannel = { n ->
      if (!n.startsWith('#')) {
        throw failure("That is not a valid channel name")
      }
      return getAttr(extensionId, n, "Channel $n not found")
    }
    listChannels = {
      getAttrNames(extensionId, "No channels found").findAll {n -> n.startsWith('#')}
    }
    listChannelsWithMember = {m ->
      allChannelNames = listChannels()
      return allChannelNames.findAll(n -> {
        channel = getMembers(getChannel(n)).contains(m)
      })
    }
    getMembers = {c ->
      return c.getAttrListValueAsMap()['members'].getValue().split(',') as List
    }
    setMembers = {c, members ->
      newMembersAttr = newAttr('members', members.join(','))
      newAttrList = c.getAttrListValue().findAll {it -> !it.getName().equals('members')}
      newAttrList << newMembersAttr
      setAttr(extensionId, c.name, newAttrList)
    }
    runAsOwner()
    callerName = getCallerName()
    subcommand = arg0
    switch (subcommand.toUpperCase()) {
      case "SAY":
        channel = getChannel(arg1)
        members = getMembers(channel)
        if (!members.contains(callerName)) {
          throw failure("You do not belong to that channel")
        }
        for (m in members) {
          sendMessageTo(m, "[$channel.name] $callerName: $arg2")
        }
        break;
      case "JOIN":
        channel = getChannel(arg1)
        members = getMembers(channel)
        if (members.contains(callerName)) {
          sendMessageToCaller('You are already joined to that channel')
        } else {
          members.add(callerName)
          setMembers(channel, members)
        }
        break;
      case "LEAVE":
        channel = getChannel(arg1)
        members = getMembers(channel)
        if (!members.contains(callerName)) {
          sendMessageToCaller('You are not joined to that channel')
        } else {
          members.remove(callerName)
          setMembers(channel, members)
        }
        break;
      case "MINE":
        channels = listChannelsWithMember(callerName)
        sendMessageToCaller(channels.isEmpty() ? "No channels found" : channels.join(' '))
        break;
      case "LIST":
        channels = listChannels()
        sendMessageToCaller(channels.isEmpty() ? "No channels found" : channels.join(' '))
        break;
      case "MEMBERS":
        members = getMembers(getChannel(arg1))
        sendMessageToCaller(members.isEmpty() ? "No members found" : members.join(' '))
        break;
      default:
        throw failure("Unsupported command $subcommand")
    }
    return null
