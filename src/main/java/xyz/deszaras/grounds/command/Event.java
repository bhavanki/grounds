package xyz.deszaras.grounds.command;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

import xyz.deszaras.grounds.model.Player;

/**
 * A record of an occurrence in the game (generated by a command that makes it
 * happen). An event usually pertains to a player, and it may have a payload,
 * which is an arbitrary object. The object, however, must be serializable to
 * JSON.
 */
public abstract class Event<T> {

  private final Player player;
  private final T payload;

  /**
   * Creates a new event.
   *
   * @param  player  the player to whom the event pertains, if any
   * @param  payload the event payload
   */
  protected Event(Player player, T payload) {
    this.player = player;
    this.payload = payload;
  }

  /**
   * Gets the player to whom the event pertains.
   *
   * @return event player
   */
  public Player getPlayer() {
    return player;
  }

  /**
   * Gets the payload.
   *
   * @return payload
   */
  public T getPayload() {
    return payload;
  }

  private static final ObjectMapper OBJECT_MAPPER = new ObjectMapper();

  /**
   * Gets the payload as a JSON string.
   *
   * @return payload, as JSON string
   * @throws IllegalStateException if the payload cannot be converted to JSON
   */
  public String getPayloadJsonString() {
    if (payload == null) {
      return null;
    }
    try {
      return OBJECT_MAPPER.writeValueAsString(payload);
    } catch (JsonProcessingException e) {
      throw new IllegalStateException("Failed to convert event payload to JSON", e);
    }
  }
}
